#!/usr/bin/env python3
"""
Script de prueba para verificar el endpoint de pagos
"""

import requests
import json
from datetime import date

# Configuraci√≥n
BASE_URL = "http://localhost:8000"
LOGIN_URL = f"{BASE_URL}/api/login"
PAYMENT_URL = f"{BASE_URL}/api/pagos/registrar"

def test_payment_endpoint():
    """Prueba el endpoint de registro de pagos"""
    
    print("üß™ Iniciando pruebas del endpoint de pagos...")
    
    # 1. Login para obtener token
    print("\n1. Obteniendo token de autenticaci√≥n...")
    login_data = {
        "email": "admin@carelink.com",
        "password": "admin123"
    }
    
    try:
        login_response = requests.post(LOGIN_URL, json=login_data)
        if login_response.status_code != 200:
            print(f"‚ùå Error en login: {login_response.status_code}")
            print(f"Respuesta: {login_response.text}")
            return
        
        token = login_response.json()["data"]["access_token"]
        headers = {"Authorization": f"Bearer {token}"}
        print("‚úÖ Login exitoso")
        
    except Exception as e:
        print(f"‚ùå Error en login: {str(e)}")
        return

    # 2. Probar registro de pago v√°lido
    print("\n2. Probando registro de pago v√°lido...")
    valid_payment = {
        "id_factura": 1,
        "id_metodo_pago": 1,
        "id_tipo_pago": 2,  # Pago parcial
        "fecha_pago": str(date.today()),
        "valor": 100000.00
    }
    
    try:
        payment_response = requests.post(PAYMENT_URL, json=valid_payment, headers=headers)
        print(f"Status Code: {payment_response.status_code}")
        print(f"Respuesta: {payment_response.text}")
        
        if payment_response.status_code == 201:
            print("‚úÖ Pago registrado exitosamente")
        else:
            print("‚ùå Error al registrar pago")
            
    except Exception as e:
        print(f"‚ùå Error en prueba de pago: {str(e)}")

    # 3. Probar con factura inexistente
    print("\n3. Probando con factura inexistente...")
    invalid_factura_payment = {
        "id_factura": 99999,
        "id_metodo_pago": 1,
        "id_tipo_pago": 2,
        "fecha_pago": str(date.today()),
        "valor": 100000.00
    }
    
    try:
        response = requests.post(PAYMENT_URL, json=invalid_factura_payment, headers=headers)
        print(f"Status Code: {response.status_code}")
        print(f"Respuesta: {response.text}")
        
        if response.status_code == 400:
            print("‚úÖ Validaci√≥n de factura inexistente funciona correctamente")
        else:
            print("‚ùå No se valid√≥ correctamente la factura inexistente")
            
    except Exception as e:
        print(f"‚ùå Error en prueba: {str(e)}")

    # 4. Probar con m√©todo de pago inexistente
    print("\n4. Probando con m√©todo de pago inexistente...")
    invalid_method_payment = {
        "id_factura": 1,
        "id_metodo_pago": 99999,
        "id_tipo_pago": 2,
        "fecha_pago": str(date.today()),
        "valor": 100000.00
    }
    
    try:
        response = requests.post(PAYMENT_URL, json=invalid_method_payment, headers=headers)
        print(f"Status Code: {response.status_code}")
        print(f"Respuesta: {response.text}")
        
        if response.status_code == 400:
            print("‚úÖ Validaci√≥n de m√©todo de pago inexistente funciona correctamente")
        else:
            print("‚ùå No se valid√≥ correctamente el m√©todo de pago inexistente")
            
    except Exception as e:
        print(f"‚ùå Error en prueba: {str(e)}")

    # 5. Probar con tipo de pago inexistente
    print("\n5. Probando con tipo de pago inexistente...")
    invalid_type_payment = {
        "id_factura": 1,
        "id_metodo_pago": 1,
        "id_tipo_pago": 99999,
        "fecha_pago": str(date.today()),
        "valor": 100000.00
    }
    
    try:
        response = requests.post(PAYMENT_URL, json=invalid_type_payment, headers=headers)
        print(f"Status Code: {response.status_code}")
        print(f"Respuesta: {response.text}")
        
        if response.status_code == 400:
            print("‚úÖ Validaci√≥n de tipo de pago inexistente funciona correctamente")
        else:
            print("‚ùå No se valid√≥ correctamente el tipo de pago inexistente")
            
    except Exception as e:
        print(f"‚ùå Error en prueba: {str(e)}")

    print("\n‚úÖ Pruebas completadas")

if __name__ == "__main__":
    test_payment_endpoint() 